#pragma once
#include "pch.h"

#include <atomic>
#include <mutex>

#define WM_USER_PREPARATION_COMPLETE (WM_USER + 1) // 准备工作完成
#define WM_USER_COPY_COMPLETE        (WM_USER + 2) // 整个复制任务完成
#define WM_USER_LOG_MESSAGE          (WM_USER + 3) // 添加一条日志消息
#define WM_USER_UPDATE_THREAD_STATUS (WM_USER + 4) // 更新一个线程的状态

// 任务类型：是复制整个小文件，还是大文件的一个数据块
enum class ETaskType {
	WHOLE_FILE,
	FILE_CHUNK
};
struct SChunkFileInfo {
	std::atomic<UINT> remainCopiedCount{ 0 };
};

// 任务结构体，描述一个具体的复制任务
struct SCopyTask {
	ETaskType type;          // 任务类型
	CString sourcePath;      // 源文件路径
	CString destPath;        // 目标文件路径
	ULONGLONG fileSize;      // 文件总大小 (两种任务都需要)
	ULONGLONG offset = 0;    // 数据块的起始位置 (仅 FILE_CHUNK 需要)
	ULONGLONG chunkSize = 0; // 数据块的大小 (仅 FILE_CHUNK 需要)
	SChunkFileInfo* chunkFileInfo = nullptr;
};



enum class EFileStatus {
	Pending,   // 等待处理
	InProgress, // 正在处理
	Completed, // 处理完成
	Failed,    // 处理失败
	Skipped,   // 被跳过
};

struct SFileInfo {
	CString sourcePath;
	CString destPath;
	ULONGLONG fileSize = 0;
	std::atomic<EFileStatus> status{ EFileStatus::Pending };
	SFileInfo() = default;
	SFileInfo(const SFileInfo& other)
		: sourcePath(other.sourcePath)
		, destPath(other.destPath)
		, fileSize(other.fileSize)
		, status(other.status.load()) {}

	SFileInfo& operator=(const SFileInfo& other) {
		if (this != &other) {
			sourcePath = other.sourcePath;
			destPath = other.destPath;
			fileSize = other.fileSize;
			status.store(other.status.load());
		}
		return *this;
	}
};

struct SSharedStats {
	std::atomic<ULONGLONG> totalBytesCopied{ 0 }; // 总共复制的字节数
	std::atomic<UINT> completedFileCount{ 0 }; // 已经完成的文件数量
	std::atomic<UINT> failedFileCount{ 0 }; // 处理失败的文件数量
	std::atomic<UINT> activeCopyThreads{ 0 }; // 当前活跃的复制线程数量

	ULONGLONG totalCopySize = 0; //所有文件总大小
	UINT totalFileCount = 0; //所有文件总数量
	std::mutex logMutex;
};

// 定义日志消息的类型（用于设置颜色）
enum class ELogLevel {
	Info,
	Success,
	Warning,
	Error
};
// 这是我们用来通过WM_USER_LOG_MESSAGE传递日志信息的结构体
// 工作线程会在堆上 new 一个，然后把指针作为LPARAM发送
// UI线程收到后负责 delete
struct LogMessage {
	CStringW text;
	ELogLevel level;
};

// 用于传递线程状态更新信息的数据结构
struct SThreadStatusInfo {
	UINT     threadId;       // 线程ID (从1开始)
	CStringW statusText;     // 状态文本，如 "复制中", "完成"
	CStringW currentFile;    // 当前正在处理的文件名
};